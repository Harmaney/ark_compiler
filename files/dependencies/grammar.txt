S -> ProgramStruct @
ProgramStruct -> ProgramHead ; ProgramBody . @
ProgramHead -> program ID @
ProgramHead -> program ID ( IDList ) @
ProgramBody -> Component CompoundStatement @
Component -> const ConstDeclaration ; Component @
Component -> type TypeDeclaration ; Component @
Component -> var VarDeclaration ; Component @
Component -> Subprogram ; Component @
Component -> @
IDList -> IDList , ID @
IDList -> ID @ 
ConstDeclaration -> ConstDeclaration ; ID = ConstValue @
ConstDeclaration -> ID = ConstValue @
ConstValue -> + Num @
ConstValue -> - Num @
ConstValue -> Value @
TypeDeclaration -> TypeDeclaration ; ID = ActualType @
TypeDeclaration -> ID = ActualType @
ActualType -> Type @
ActualType -> record VarDeclaration ; end @
VarDeclaration -> VarDeclaration ; IDList : ActualType @
VarDeclaration -> IDList : ActualType @
Type -> ^ BasicType @
Type -> BasicType @
Type -> array [ Period ] of BasicType @
BasicType -> integer @
BasicType -> longint @
BasicType -> int64 @
BasicType -> real @
BasicType -> boolean @
BasicType -> char @
BasicType -> string @
Period -> Period , Digits .. Digits @
Period -> Digits .. Digits @
Subprogram -> SubprogramHead ; SubprogramBody @
SubprogramHead -> procedure ID FormalParameter @
SubprogramHead -> function ID FormalParameter : BasicType @
FormalParameter -> ( ParameterList ) @
FormalParameter -> ( ) @
FormalParameter -> @
ParameterList -> ParameterList ; Parameter @
ParameterList -> Parameter @
Parameter -> VarParameter @
Parameter -> ValueParameter @
VarParameter -> var ValueParameter @
ValueParameter -> IDList : BasicType @
SubprogramBody -> SubComponent CompoundStatement @
SubComponent -> const ConstDeclaration ; SubComponent @
SubComponent -> var VarDeclaration ; SubComponent @
SubComponent -> @
CompoundStatement -> begin StatementList end @
StatementList -> StatementList ; Statement @
StatementList -> Statement @
Statement -> ComposedVariable assignOP Expression @
Statement -> ProcedureCall(ARG) @
Statement -> if Expression then CompoundStatement ElsePart @
Statement -> if Expression then Statement ElsePart @
Statement -> for ID assignOP Expression to Expression do CompoundStatement @
Statement -> for ID assignOP Expression to Expression do Statement @
Statement -> while Expression do CompoundStatement @
Statement -> while Expression do Statement @
Statement -> @
Variable -> ID IDVarpart @
IDVarpart -> [ ExpressionList ] @
IDVarpart -> @
ProcedureCall(ARG) -> ID ( ExpressionList ) @
ProcedureCall(ARG) -> ID ( ) @
ElsePart -> else CompoundStatement @
ElsePart -> else Statement @
ElsePart -> @
ExpressionList -> ExpressionList , Expression @
ExpressionList -> Expression @
Expression -> SimpleExpression relOP SimpleExpression @
Expression -> SimpleExpression = SimpleExpression @
Expression -> SimpleExpression @
Expression -> Expression ^ @
SimpleExpression -> SimpleExpression addOP Term @
SimpleExpression -> Term @
Term -> Term mulOP Factor @
Term -> Factor @
Factor -> Value @
Factor -> + Num @
Factor -> - Num @
Factor -> not Factor @
Factor -> uminus Factor @
Factor -> ComposedVariable @
ComposedVariable -> ComposedVariable . ID @
ComposedVariable -> Variable @
ComposedVariable -> ProcedureCall(ARG) @
ComposedVariable -> ( Expression ) @
Num -> intVal @ 
Num -> realVal @
Value -> Num @
Value -> stringVal @
Digits -> intVal @
addOP -> + @
addOP -> - @
addOP -> or @